name: Python CI/CD

on:
  push:
    branches: [ main ]

env:
  IMAGE_NAME: hand_gesture
  DOCKER_USERNAME: moatia
  TAG: latest

jobs:
  ci-build-deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests with pytest
      run: |
        cd app
        pytest test.py

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: success()

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build Docker image
      run: docker build -t $IMAGE_NAME:$TAG .

    - name: Tag and Push to Docker Hub
      run: |
        docker tag $IMAGE_NAME:$TAG $DOCKER_USERNAME/$IMAGE_NAME:$TAG
        docker push $DOCKER_USERNAME/$IMAGE_NAME:$TAG

    - name: Write SSH key to file
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
        chmod 600 ec2_key.pem

    - name: Deploy to EC2 and Run Container
      env:
        HOST: ${{ secrets.EC2_HOST }}
        DOCKER_IMAGE: ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}
      run: |
        ssh -o StrictHostKeyChecking=no -i ec2_key.pem ubuntu@$HOST << EOF
          echo "✅ Logged into EC2"


          # Install Docker if not installed
          if ! command -v docker &> /dev/null; then
            echo "Installing Docker..."
            sudo apt-get update
            sudo apt-get install -y ca-certificates curl gnupg lsb-release
            sudo mkdir -p /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
              $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            sudo usermod -aG docker ubuntu
            echo "✅ Docker installed"
          else
            echo "✅ Docker already installed"
          fi


          # Stop and remove existing container
          docker rm -f myapp || true

          # Remove old images to save space (optional)
          docker rmi -f $(docker images -q) || true

          # Pull and run latest image
          docker pull $DOCKER_IMAGE
          docker run -d --name myapp -p 80:8000 $DOCKER_IMAGE

          docker logs myapp
          echo "✅ Deployed latest image to EC2"
        EOF
