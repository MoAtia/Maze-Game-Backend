name: Python CI/CD

on:
  push:
    branches: [ main ]

env:
  IMAGE_NAME: hand_gesture
  DOCKER_USERNAME: moatia
  TAG: latest

jobs:
  ci-build-deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests with pytest
      run: |
        cd app
        pytest test.py
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: success()
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build Docker image
      run: docker build -t $IMAGE_NAME:$TAG .
    
    - name: Tag and Push to Docker Hub
      run: |
        docker tag $IMAGE_NAME:$TAG $DOCKER_USERNAME/$IMAGE_NAME:$TAG
        docker push $DOCKER_USERNAME/$IMAGE_NAME:$TAG
    
    - name: Write SSH key to file
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
        chmod 600 ec2_key.pem
    
    - name: Clean EC2 Storage and Deploy
      env:
        HOST: ${{ secrets.EC2_HOST }}
        DOCKER_IMAGE: ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}
      run: |
        ssh -o StrictHostKeyChecking=no -i ec2_key.pem ubuntu@$HOST << 'EOF'
          echo "ðŸ§¹ Starting EC2 storage cleanup..."
          
          # Stop and remove all running containers
          echo "Stopping all containers..."
          sudo docker stop $(sudo docker ps -aq) 2>/dev/null || true
          
          # Remove all containers
          echo "Removing all containers..."
          sudo docker rm $(sudo docker ps -aq) 2>/dev/null || true
          
          # Remove all Docker images (complete cleanup)
          echo "Removing all Docker images..."
          sudo docker rmi -f $(sudo docker images -aq) 2>/dev/null || true
          
          # Clean Docker system (removes networks, volumes, build cache)
          echo "Cleaning Docker system..."
          sudo docker system prune -af --volumes
          
          # Clean package cache
          echo "Cleaning package cache..."
          sudo apt-get clean
          sudo apt-get autoclean
          sudo apt-get autoremove -y
          
          # Clean temporary files
          echo "Cleaning temporary files..."
          sudo rm -rf /tmp/*
          sudo rm -rf /var/tmp/*
          
          # Clean log files (keep recent ones but truncate large files)
          echo "Cleaning log files..."
          sudo find /var/log -name "*.log" -size +100M -exec truncate -s 0 {} \;
          sudo journalctl --vacuum-time=7d
          
          # Clean user cache and temporary files
          rm -rf ~/.cache/*
          rm -rf ~/.tmp/*
          
          # Display storage usage after cleanup
          echo "ðŸ“Š Storage usage after cleanup:"
          df -h /
          
          echo "âœ… Storage cleanup completed"
          
          # Now deploy the new application
          echo "ðŸš€ Deploying new application..."
          
          # Pull and run latest image
          sudo docker pull $DOCKER_IMAGE
          sudo docker run -d --name myapp -p 80:8000 $DOCKER_IMAGE
          
          # Show container logs
          sudo docker logs myapp
          
          echo "âœ… Deployed latest image to EC2"
          
          # Final storage check
          echo "ðŸ“Š Final storage usage:"
          df -h /
        EOF