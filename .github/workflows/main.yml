name: Python CI/CD

on:
  push:
    branches: [ main ]

env:
  IMAGE_NAME: hand_gesture
  DOCKER_USERNAME: moatia
  TAG: latest

jobs:
  ci-build-deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests with pytest
      run: |
        cd app
        pytest test.py

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: success()

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build Docker image
      run: docker build -t $IMAGE_NAME:$TAG .

    - name: Tag and Push to Docker Hub
      run: |
        docker tag $IMAGE_NAME:$TAG $DOCKER_USERNAME/$IMAGE_NAME:$TAG
        docker push $DOCKER_USERNAME/$IMAGE_NAME:$TAG

    - name: Write SSH key to file
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
        chmod 600 ec2_key.pem

    - name: Deploy to EC2 and Run Container
      env:
        HOST: ${{ secrets.EC2_HOST }}
        DOCKER_IMAGE: ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}
      run: |
        ssh -o StrictHostKeyChecking=no -i ec2_key.pem ubuntu@$HOST << EOF
          echo "✅ Logged into EC2"


          # Stop and remove existing container
          sudo docker stop myapp || true
          sudo docker rm myapp || true
          sudo docker rmi myapp || true


          # Remove old images to save space (optional)
          sudo docker rmi -f $(docker images -q) || true

          # Pull and run latest image
          sudo docker pull $DOCKER_IMAGE
          sudo docker run -d --name myapp -p 80:8000 $DOCKER_IMAGE

          sudo docker logs myapp
          echo "✅ Deployed latest image to EC2"
        EOF
